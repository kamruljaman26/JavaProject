package arrayGenerator;

import scope.Scope;

/**
 * A scoped array generator generates arrays in which the generated elements fall within
 * a certain {@link Scope}.
 *
 * Implementing classes must provide methods for checking whether a value is within the scope,
 * a method returning a random element within the scope, and a method returning the size of the
 * scope.
 *
 * @param <T> the type of object in the arrays generated by this array generator.
 *
 * @author Hugh Osborne
 * @version October 2019
 */

public abstract class ScopedArrayGenerator<T> implements ArrayGenerator<T> {

    private Scope<T> scope; // the scope of this generator

    public ScopedArrayGenerator(Scope<T> scope) {
        this.scope = scope;
    }

    /**
     * Get the scope used by this generator.
     * @return the scope used by this generator.
     */
    public Scope<T> getScope() {
        return scope;
    }

    /**
     * Create an array of the required type and size.
     *
     * In getArray we would like to have:
     *   T[] array = new T[];
     * but this is not allowed by Java (generic type parameters cannot be instantiated).
     *
     * Instead, subclasses of this class where the abstract type has been instantiated
     * to a concrete type must provide a createArray method that will create a new, empty array
     * of the required type and size.
     *
     * @param size the size of the array to be generated
     * @return an array of the required size, containing values within this scope
     */
    abstract T[] createArray(int size);

    /**
     * Generate an array of random values (within this generator's scope).
     *
     * @param size the size of the array to be generated.
     * @return an array of the required size, containing random values from within the
     * permitted scope.
     *
     * @throws NegativeArraySizeException if the size given is negative.
     */
    public T[] getArray(int size) throws NegativeArraySizeException {
        if (size < 0) {
            throw new NegativeArraySizeException();
        }
        T[] array = createArray(size);
        for (int i = 0; i < size; i++) {
            array[i] = scope.getValue();
        }
        return array;
    }
}
